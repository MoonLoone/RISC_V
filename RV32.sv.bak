import RV_32_consts::*;
import tb_constants::MEMORY_SIZE;

module RV32(
input logic clk_i, 
input logic rst_i, //Active-high reset
input logic[31:0] instr_data_i, //instruction address
input logic[31:0] mem_data_i, //read memmory data
output logic[31:0] instr_addr_o, //instruction address
output logic mem_we_o, //Active-high memmory write
output logic[31:0] mem_addr_o, //read memory address
output logic[31:0] mem_data_o //write memory data
);
logic [MEMORY_SIZE/2-1:0] cmd_cnt; //command counter
logic[31:0] x[3:0];
always_ff@(posedge clk_i or negedge rst_i)
begin
	if (!rst_i) begin
		x[0] <= 0;
		x[1] <= 0;
		x[2] <= 0;
		x[3] <= 0;
		cmd_cnt <= 1;
		instr_addr_o <= MEMORY_SIZE-1;
		mem_we_o <= 0;
		mem_addr_o <= MEMORY_SIZE/4;
	end
	else begin
		$strobe("instr = %b, LOAD = %b, eq = %b", instr_data_i[6:0], LOAD, LOAD==instr_data_i[6:0]);
		case (instr_data_i[6:0])
		OP_IMM:
			case (instr_data_i[14:12])
				ADDI:
					begin
					$strobe("ADDI");
					end
				ANDI:
					begin
					$strobe("ANDI");
					end
				default: $strobe("Undefined OP_IMM");
			endcase
			
		LOAD: 
			begin
				$strobe("LOAD");	
			end
		STORE: 
			begin
				$strobe("STORE");	
			end
		default: $strobe("Undefined command");
		endcase;
		cmd_cnt <= cmd_cnt+1;
		instr_addr_o <= MEMORY_SIZE-cmd_cnt-1;		
	end
end
endmodule